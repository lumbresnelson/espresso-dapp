import React, { useState, useRef } from 'react';
import { useInternetIdentity } from '../hooks/useInternetIdentity';
import { useValidateWasm, useCalculateWasmHash, useLogDeployment } from '../hooks/useQueries';
import { Upload, Code, Rocket, CheckCircle, XCircle, AlertCircle, Loader2, Lightbulb, ArrowRight, Users, Shield, Zap } from 'lucide-react';

export default function DeploymentInterface() {
  const { identity } = useInternetIdentity();
  const [input, setInput] = useState('');
  const [inputType, setInputType] = useState<'canister-id' | 'code'>('canister-id');
  const [wasmFile, setWasmFile] = useState<File | null>(null);
  const [validationResult, setValidationResult] = useState<boolean | null>(null);
  const [deploymentStatus, setDeploymentStatus] = useState<'idle' | 'deploying' | 'success' | 'error'>('idle');
  const [deployedCanisterId, setDeployedCanisterId] = useState<string>('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const validateWasm = useValidateWasm();
  const calculateHash = useCalculateWasmHash();
  const logDeployment = useLogDeployment();

  const isAuthenticated = !!identity;

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setWasmFile(file);
      setValidationResult(null);
      
      // Validate the WASM file
      try {
        const arrayBuffer = await file.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        const isValid = await validateWasm.mutateAsync(uint8Array);
        setValidationResult(isValid);
      } catch (error) {
        console.error('Validation error:', error);
        setValidationResult(false);
      }
    }
  };

  const handleDeploy = async () => {
    if (!isAuthenticated) {
      alert('Please login to deploy canisters');
      return;
    }

    setDeploymentStatus('deploying');

    try {
      // Simulate deployment process
      await new Promise(resolve => setTimeout(resolve, 2000));

      let canisterId = '';
      let wasmHash = '';

      if (inputType === 'canister-id') {
        canisterId = input.trim();
        // For canister ID input, we'll use a placeholder hash
        wasmHash = `0x${Math.random().toString(16).substr(2, 8)}`;
      } else if (wasmFile) {
        // For WASM file upload
        const arrayBuffer = await wasmFile.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        wasmHash = await calculateHash.mutateAsync(uint8Array);
        
        // Generate a mock canister ID
        canisterId = `rdmx6-jaaaa-aaaah-qcaiq-cai`;
      }

      // Log the deployment
      await logDeployment.mutateAsync({ canisterId, wasmHash });

      setDeployedCanisterId(canisterId);
      setDeploymentStatus('success');
    } catch (error) {
      console.error('Deployment error:', error);
      setDeploymentStatus('error');
    }
  };

  const resetForm = () => {
    setInput('');
    setWasmFile(null);
    setValidationResult(null);
    setDeploymentStatus('idle');
    setDeployedCanisterId('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const canDeploy = isAuthenticated && (
    (inputType === 'canister-id' && input.trim()) ||
    (inputType === 'code' && wasmFile && validationResult === true)
  );

  return (
    <div className="space-y-8">
      {/* Hero Description Section */}
      <div className="bg-gradient-to-r from-blue-900 via-purple-900 to-indigo-900 rounded-xl p-8">
        <div className="max-w-4xl mx-auto text-center">
          <div className="flex items-center justify-center space-x-3 mb-6">
            <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
              <Rocket className="w-7 h-7 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-white">Why Espresso Matters</h1>
          </div>
          
          <p className="text-xl text-gray-200 mb-8 leading-relaxed">
            Espresso revolutionizes dApp deployment on the Internet Computer by making it accessible, 
            transparent, and community-driven. Deploy your applications with confidence and join a 
            thriving ecosystem of developers.
          </p>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center">
              <Zap className="w-8 h-8 text-yellow-400 mx-auto mb-3" />
              <h3 className="text-lg font-semibold text-white mb-2">One-Click Deployment</h3>
              <p className="text-gray-300 text-sm">
                Deploy your dApps instantly with our streamlined, user-friendly interface. 
                No complex setup or configuration required.
              </p>
            </div>
            
            <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center">
              <Shield className="w-8 h-8 text-green-400 mx-auto mb-3" />
              <h3 className="text-lg font-semibold text-white mb-2">Full Transparency</h3>
              <p className="text-gray-300 text-sm">
                Every deployment is logged publicly on-chain, ensuring complete transparency 
                and accountability in the deployment process.
              </p>
            </div>
            
            <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center">
              <Users className="w-8 h-8 text-purple-400 mx-auto mb-3" />
              <h3 className="text-lg font-semibold text-white mb-2">Community Support</h3>
              <p className="text-gray-300 text-sm">
                Backed by community donations and support, Espresso provides free deployment 
                services to help developers succeed.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* How to Use Guide */}
      <div className="bg-gray-800 rounded-xl p-6">
        <div className="flex items-center space-x-3 mb-6">
          <Lightbulb className="w-6 h-6 text-yellow-400" />
          <h2 className="text-xl font-semibold text-white">How to Use Espresso</h2>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
              <span className="text-white font-bold text-sm">1</span>
            </div>
            <div>
              <h3 className="font-semibold text-white mb-2">Enter Your Code</h3>
              <p className="text-gray-400 text-sm">
                Provide a Caffeine AI canister ID or upload your WASM module directly. 
                Our system will validate your code automatically.
              </p>
            </div>
          </div>
          
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
              <span className="text-white font-bold text-sm">2</span>
            </div>
            <div>
              <h3 className="font-semibold text-white mb-2">Deploy with One Click</h3>
              <p className="text-gray-400 text-sm">
                Click the deploy button and watch as your canister is created and deployed 
                to the Internet Computer in seconds.
              </p>
            </div>
          </div>
          
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
              <span className="text-white font-bold text-sm">3</span>
            </div>
            <div>
              <h3 className="font-semibold text-white mb-2">View & Share</h3>
              <p className="text-gray-400 text-sm">
                Your deployment appears in the public log instantly. Share your canister ID 
                and start using your dApp right away.
              </p>
            </div>
          </div>
        </div>
        
        <div className="mt-6 p-4 bg-blue-900/30 border border-blue-700 rounded-lg">
          <div className="flex items-center space-x-2 text-blue-300">
            <ArrowRight className="w-4 h-4" />
            <span className="font-medium">Ready to get started? Login and deploy your first canister below!</span>
          </div>
        </div>
      </div>

      {/* Deployment Interface */}
      <div className="bg-gray-800 rounded-lg p-6">
        <div className="flex items-center space-x-3 mb-6">
          <Rocket className="w-6 h-6 text-blue-400" />
          <h2 className="text-xl font-semibold text-white">Deploy Canister</h2>
        </div>

        {!isAuthenticated && (
          <div className="mb-6 p-4 bg-yellow-900 border border-yellow-700 rounded-lg">
            <div className="flex items-center space-x-2">
              <AlertCircle className="w-5 h-5 text-yellow-400" />
              <p className="text-yellow-200">Please login to deploy canisters</p>
            </div>
          </div>
        )}

        {/* Input Type Selection */}
        <div className="mb-6">
          <div className="flex space-x-4 mb-4">
            <button
              onClick={() => setInputType('canister-id')}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                inputType === 'canister-id'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
              }`}
            >
              <Code className="w-4 h-4" />
              <span>Canister ID</span>
            </button>
            <button
              onClick={() => setInputType('code')}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                inputType === 'code'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
              }`}
            >
              <Upload className="w-4 h-4" />
              <span>Upload WASM</span>
            </button>
          </div>

          {inputType === 'canister-id' ? (
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Caffeine AI Canister ID or Code Snippet
              </label>
              <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Enter canister ID (e.g., rdmx6-jaaaa-aaaah-qcaiq-cai) or paste your code snippet here..."
                className="w-full h-32 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                disabled={!isAuthenticated}
              />
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Upload WASM Module
              </label>
              <div className="border-2 border-dashed border-gray-600 rounded-lg p-6 text-center">
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".wasm"
                  onChange={handleFileUpload}
                  className="hidden"
                  disabled={!isAuthenticated}
                />
                <button
                  onClick={() => fileInputRef.current?.click()}
                  disabled={!isAuthenticated}
                  className="flex items-center space-x-2 mx-auto px-4 py-2 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 text-gray-300 rounded-lg transition-colors"
                >
                  <Upload className="w-4 h-4" />
                  <span>Choose WASM File</span>
                </button>
                {wasmFile && (
                  <div className="mt-4 flex items-center justify-center space-x-2">
                    <span className="text-gray-300">{wasmFile.name}</span>
                    {validationResult === true && <CheckCircle className="w-5 h-5 text-green-400" />}
                    {validationResult === false && <XCircle className="w-5 h-5 text-red-400" />}
                    {validateWasm.isPending && <Loader2 className="w-5 h-5 text-blue-400 animate-spin" />}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Validation Status */}
        {inputType === 'code' && wasmFile && validationResult !== null && (
          <div className={`mb-6 p-4 rounded-lg ${
            validationResult ? 'bg-green-900 border border-green-700' : 'bg-red-900 border border-red-700'
          }`}>
            <div className="flex items-center space-x-2">
              {validationResult ? (
                <CheckCircle className="w-5 h-5 text-green-400" />
              ) : (
                <XCircle className="w-5 h-5 text-red-400" />
              )}
              <p className={validationResult ? 'text-green-200' : 'text-red-200'}>
                {validationResult ? 'WASM module is valid' : 'Invalid WASM module'}
              </p>
            </div>
          </div>
        )}

        {/* Deploy Button */}
        <div className="flex space-x-4">
          <button
            onClick={handleDeploy}
            disabled={!canDeploy || deploymentStatus === 'deploying'}
            className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-medium py-2 px-6 rounded-lg transition-colors"
          >
            {deploymentStatus === 'deploying' ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Rocket className="w-4 h-4" />
            )}
            <span>
              {deploymentStatus === 'deploying' ? 'Deploying...' : 'Deploy Canister'}
            </span>
          </button>

          {deploymentStatus !== 'idle' && (
            <button
              onClick={resetForm}
              className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-gray-300 rounded-lg transition-colors"
            >
              Reset
            </button>
          )}
        </div>

        {/* Deployment Result */}
        {deploymentStatus === 'success' && (
          <div className="mt-6 p-4 bg-green-900 border border-green-700 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <h3 className="font-medium text-green-200">Deployment Successful!</h3>
            </div>
            <p className="text-green-200 text-sm">
              Canister ID: <code className="bg-green-800 px-2 py-1 rounded">{deployedCanisterId}</code>
            </p>
          </div>
        )}

        {deploymentStatus === 'error' && (
          <div className="mt-6 p-4 bg-red-900 border border-red-700 rounded-lg">
            <div className="flex items-center space-x-2">
              <XCircle className="w-5 h-5 text-red-400" />
              <p className="text-red-200">Deployment failed. Please try again.</p>
            </div>
          </div>
        )}
      </div>

      {/* Template Section */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Quick Start Template</h3>
        <div className="bg-gray-700 rounded-lg p-4">
          <h4 className="font-medium text-gray-200 mb-2">Decentralized Link Shortener</h4>
          <p className="text-gray-400 text-sm mb-3">
            A simple link shortener service that runs entirely on the Internet Computer.
          </p>
          <button
            onClick={() => {
              setInputType('canister-id');
              setInput('rdmx6-jaaaa-aaaah-qcaiq-cai');
            }}
            className="text-blue-400 hover:text-blue-300 text-sm font-medium transition-colors"
          >
            Use Template →
          </button>
        </div>
      </div>
    </div>
  );
}
